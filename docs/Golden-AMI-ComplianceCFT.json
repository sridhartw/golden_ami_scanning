 {
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Asset Inventory and AMI Factory - This Cloudformation template creates resources required to set up a Golden AMI Pipeline",
    "Parameters": {
        "productName": {
            "Type": "String",
            "Default": "DevOpsAMI-1.0",
            "Description": "ProductName-ProductVersion combination of the product for which you intend to use the pipeline. You get to override this later when you trigger automation workflow."
        },
        "productOSAndVersion": {
            "Type": "String",
            "Default": "AmazonLinux2AMI2.0.20200520.1x86_64HVMgp2",
            "Description": "Operating system name and OS version. You get to override this later when you trigger automation workflow."
        },
        "buildVersion": {
            "Type": "String",
            "Default": "1",
            "Description": "Build-Version corresponding to your product. Note - This is just a default value, you get to override this later when you trigger automation workflow."
        },
        "ApproverARN": {
            "Type": "String",
            "AllowedPattern": "^(?!\\s*$).+",
            "Description": "AWS authenticated principals who are able to either approve or reject the Golden AMI. You can specify principals by using an AWS Identity and Access Management (IAM) user name, IAM user ARN, IAM role ARN, or an IAM assume role user ARN"
        },
        "EmailID": {
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "Description": "Your email ID for receiving Inspector assessment results and golden AMI creation notification."
        },
        "instanceType": {
            "Type": "String",
            "Default": "t3.large",
            "Description": "Specify the the InstanceType compatible with all your golden AMIs. This InstanceType will be used for launching continuous vulnerability assessment of golden AMIs."
        },
        "continuousInspectionFrequency": {
            "Type": "String",
            "Default": "rate(1 day)",
            "Description": "Frequency for setting up continuous inspection of your AMIs. For syntax, check - https://docs.aws.amazon.com/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": "10.0.0.0/16"
            }
            "Location" : ["terraform/modules/vpc/vpc.tf"]
        },
        "subnetPrivate": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.1.0/24",
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Location" : ["terraform/modules/vpc/private_subnet.tf"]

        },
        "subnetPublic": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "MapPublicIpOnLaunch": true,
                "CidrBlock": "10.0.2.0/24",
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Location" : ["terraform/modules/vpc/public_subnet.tf"]
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Location" : ["terraform/modules/vpc/public_subnet.tf"]

        },
        "PublicVPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Location" : ["terraform/modules/vpc/public_subnet.tf"]
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Location" : ["terraform/modules/vpc/public_subnet.tf"]
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "PublicVPCGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Location" : ["terraform/modules/vpc/public_subnet.tf"]
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "subnetPublic"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Location" : ["terraform/modules/vpc/public_subnet.tf"]

        },
        "NAT": {
            "DependsOn": "PublicVPCGatewayAttachment",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "subnetPublic"
                }
            },
            "Location" : ["terraform/modules/vpc/private_subnet.tf"]
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Location" : ["terraform/modules/vpc/private_subnet.tf"]
        },
        "EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            },
            "Location" : ["terraform/modules/vpc/private_subnet.tf"]
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "PublicVPCGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NAT"
                }
            },
            "Location" : ["terraform/modules/vpc/private_subnet.tf"]
        },
        "PrivateSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "subnetPrivate"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Location" : ["terraform/modules/vpc/private_subnet.tf"]
        },
        "secGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Allow HTTP traffic",
                "SecurityGroupIngress": []
            },
            "Location" : ["terraform/modules/vpc/sg.tf"],
            "Implemented" : false
        },
        "GoldenAMIConfigBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                }
            },
            "Location" : ["terraform/modules/s3/s3.tf"]
        },
        "GoldenAmiConfigBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "DependsOn": "ManagedInstanceRole",
            "Properties": {
                "Bucket": {
                    "Ref": "GoldenAMIConfigBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "GoldenAMIConfigBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "GoldenAMIConfigBucket"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::GetAtt": [
                                            "ManagedInstanceRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "AutomationServiceRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "PublishAMILambdaRole",
                                            "Arn"
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            "Location" : ["terraform/modules/s3/s3.tf"]
        },
        "PublishAMILambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "PublishAMILambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ssm:",
                                                "*",
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":parameter/GoldenAMI/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject*",
                                        "s3:PutObject*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "GoldenAMIConfigBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "servicecatalog:SearchProductsAsAdmin",
                                        "servicecatalog:CreateProvisioningArtifact",
                                        "servicecatalog:CreateProduct",
                                        "cloudformation:ValidateTemplate"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/lambda/iam.tf", "terraform/modules/lambda/publish_ami.tf"]
        },
        "ApproverTopicPolicy": {
            "Type": "AWS::SNS::TopicPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "ApproverTopicPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "ApproverTopicPolicySID",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::GetAtt": [
                                            "AutomationServiceRole",
                                            "Arn"
                                        ]
                                    }
                                ]
                            },
                            "Action": "sns:Publish",
                            "Resource": {
                                "Ref": "ApproverNotification"
                            }
                        }
                    ]
                },
                "Topics": [
                    {
                        "Ref": "ApproverNotification"
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodule/sns/sns.tf", "terraform/modules/scanner/approver.tf"]

        },
        "ApproverNotification": {
            "Type": "AWS::SNS::Topic",
            "Location" : ["terraform/modules/scanner/submodule/sns/sns.tf", "terraform/modules/scanner/approver.tf"]
        },
        "ApproverNotificationSubscription": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "Endpoint": {
                    "Ref": "EmailID"
                },
                "Protocol": "email",
                "TopicArn": {
                    "Ref": "ApproverNotification"
                }
            },
            "Location" : ["terraform/modules/scanner/submodule/sns/sns.tf", "terraform/modules/scanner/approver.tf"]
        },
        "PublishAMILambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "PublishAMILambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "import json",
                                "from dateutil import parser",
                                "import dateutil",
                                "import datetime",
                                "import collections",
                                "import os",
                                "import time",
                                "def lambda_handler(event, context):",
                                "    sourceRegion = os.environ['AWS_DEFAULT_REGION']",
                                "    s3 = boto3.resource('s3')",
                                "    prodName=event['productNameAndVersion']",
                                "    prodOS=event['productOSAndVersion']",
                                "    bucket =event['bucketName']",
                                "    s3FilePrefix=event['templateFileName']",
                                "    version=event['versionToBeCreated']",
                                "    amiRegionMappingParamName =event['amiRegionMappingParamName']",
                                "    filepath='/tmp/'+s3FilePrefix",
                                "    object=s3.Object(bucket,s3FilePrefix)",
                                "    text=object.get()[\"Body\"].read().decode('utf-8') ",
                                "    amiIDParamPath = '/GoldenAMI/'+prodOS+'/'+prodName+'/'+event['versionToBeCreated']",
                                "    text=text.replace('AMI_ID_TO_REPLACE', amiIDParamPath)",
                                "    with open(filepath, mode='w',encoding='utf-8') as file:",
                                "        file.write(text)",
                                "    s3.meta.client.upload_file(filepath,bucket,s3FilePrefix+'/versions/'+version)",
                                "    ssm = boto3.client('ssm',os.environ['AWS_DEFAULT_REGION'])",
                                "    amiIDRegionMapping =  ssm.get_parameter(Name=amiRegionMappingParamName)['Parameter']['Value']",
                                "    mappingJSON = json.loads(amiIDRegionMapping)",
                                "    for region, amiID in mappingJSON.items():",
                                "        sc = boto3.client('servicecatalog',region)",
                                "        scProduct=''",
                                "        products = sc.search_products_as_admin(ProductSource='ACCOUNT')",
                                "        for product in products['ProductViewDetails']:",
                                "            productName = product['ProductViewSummary']['Name']",
                                "            if productName == prodName+'-'+prodOS:    ",
                                "                scProduct=product['ProductViewSummary']['ProductId']",
                                "                sc.create_provisioning_artifact(ProductId=scProduct,Parameters={'Name': version,'Description': 'This is version '+version,'Info': {'LoadTemplateFromURL': 'https://s3.amazonaws.com/'+bucket+'/'+s3FilePrefix+'/versions/'+version},'Type': 'CLOUD_FORMATION_TEMPLATE'},IdempotencyToken=str(round(time.time() * 1000)))",
                                "        if scProduct == '':",
                                "            print('SC product not found, creating a product')",
                                "            result = sc.create_product(Name=prodName+'-'+prodOS,Owner='CCOE',ProductType='CLOUD_FORMATION_TEMPLATE', Description='This product can be used to launch '+prodName+' in '+prodOS+' environment.', Tags=[{'Key': 'ProductName','Value': prodName+'-'+prodOS}],ProvisioningArtifactParameters={'Name':version,'Description': 'This is version '+version,'Info': {'LoadTemplateFromURL': 'https://s3.amazonaws.com/'+bucket+'/'+s3FilePrefix+'/versions/'+version},'Type': 'CLOUD_FORMATION_TEMPLATE'},IdempotencyToken=str(round(time.time() * 1000)))",
                                "    return 'Done';"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            },
            "Location" : ["terraform/modules/scanner/lambda/iam.tf", "terraform/modules/scanner/publish_ami.tf"]
        },
        "DecommissionAMIVersionLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "DecommissionAMIVersionLambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter*",
                                        "ssm:PutParameter*",
                                        "ssm:delete*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ssm:",
                                                "*",
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":parameter/GoldenAMI/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:delete*",
                                        "s3:get*"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "GoldenAMIConfigBucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "GoldenAMIConfigBucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DeregisterImage",
                                        "ec2:DescribeSnapshots",
                                        "ec2:DeleteSnapshot",
                                        "sc:list*",
                                        "sc:search*",
                                        "servicecatalog:SearchProductsAsAdmin",
                                        "servicecatalog:ListProvisioningArtifacts",
                                        "servicecatalog:DeleteProduct",
                                        "servicecatalog:DeleteProvisioningArtifact"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/iam.tf", "terraform/modules/scanner/decommision_ami_version.tf"]

        },
        "DecommissionAMIVersionLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "DecommissionAMIVersionLambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "\n",
                                "import boto3",
                                "\n",
                                "import json",
                                "\n",
                                "from dateutil import parser",
                                "\n",
                                "import dateutil",
                                "\n",
                                "import datetime",
                                "\n",
                                "import collections",
                                "\n",
                                "import os",
                                "\n",
                                "import time",
                                "\n",
                                "import botocore",
                                "\n",
                                "def lambda_handler(event, context):",
                                "\n",
                                "    sourceRegion = os.environ['AWS_DEFAULT_REGION']",
                                "\n",
                                "    s3 = boto3.resource('s3')",
                                "\n",
                                "    prodName=event['productNameAndVersion']",
                                "\n",
                                "    prodOS=event['productOSAndVersion']",
                                "\n",
                                "    bucketName =event['bucketName']",
                                "\n",
                                "    s3FilePrefix=event['templateFileName']",
                                "\n",
                                "    version=event['versionToBeDeleted']",
                                "\n",
                                "    amiRegionMappingParamName =event['amiRegionMappingParamName']",
                                "\n",
                                "    prefix='/GoldenAMI/'+prodOS+'/'+prodName+'/'+version",
                                "\n",
                                "    s3 = boto3.resource('s3')",
                                "\n",
                                "    masterAmis='/GoldenAMI/latest'",
                                "\n",
                                "    bucket = s3.Bucket(bucketName)",
                                "\n",
                                "    bucket.delete_objects(Delete={'Objects': [{'Key': s3FilePrefix+'/versions/'+version } ] })",
                                "\n",
                                "    ssm = boto3.client('ssm',sourceRegion)",
                                "\n",
                                "    amiIDRegionMapping=''",
                                "\n",
                                "    params= [prefix+'/latestInstance',prefix+'/LatestAssessmentRunARN',prefix+'/NumCVEs',prefix+'/assessmentLink',prefix+'/assessmentTemplateARN']",
                                "\n",
                                "    try:",
                                "\n",
                                "        amiIDRegionMapping =  ssm.get_parameter(Name=amiRegionMappingParamName)['Parameter']['Value']",
                                "\n",
                                "    except botocore.exceptions.ClientError as e:",
                                "\n",
                                "        if e.response['Error']['Code'] == 'ParameterNotFound':",
                                "\n",
                                "            amiID= ssm.get_parameter(Name=prefix)['Parameter']['Value']",
                                "\n",
                                "            ec2 = boto3.client('ec2')",
                                "\n",
                                "            ec2.deregister_image(ImageId=amiID)",
                                "\n",
                                "            time.sleep(5)",
                                "\n",
                                "            snaps = ec2.describe_snapshots()",
                                "\n",
                                "            for snap in snaps['Snapshots']: ",
                                "\n",
                                "                if amiID in snap['Description']:",
                                "\n",
                                "                    ec2.delete_snapshot(SnapshotId=snap['SnapshotId'])",
                                "\n",
                                "            ssm.delete_parameters(Names=params)",
                                "\n",
                                "            try:",
                                "\n",
                                "                temp =  ssm.get_parameter(Name=masterAmis)['Parameter']['Value']",
                                "\n",
                                "                temp= temp.replace(amiID+',','').replace(','+amiID,'').replace(amiID,'')",
                                "\n",
                                "                if len(temp) == 0:",
                                "\n",
                                "                    ssm.delete_parameters(Names=[masterAmis])",
                                "\n",
                                "                else:",
                                "\n",
                                "                    ssm.put_parameter(Name=masterAmis,Type='String', Value=temp,Overwrite=True)",
                                "\n",
                                "                return 'Done'",
                                "\n",
                                "            except botocore.exceptions.ClientError as e:",
                                "\n",
                                "                if e.response['Error']['Code'] == 'ParameterNotFound':",
                                "\n",
                                "                    print('This indicates that the active amis are not present')",
                                "\n",
                                "            return 'Done'",
                                "\n",
                                "    mappingJSON = json.loads(amiIDRegionMapping)",
                                "\n",
                                "    for region,amiID in mappingJSON.items():",
                                "\n",
                                "        sc = boto3.client('servicecatalog',region)",
                                "\n",
                                "        products = sc.search_products_as_admin(ProductSource='ACCOUNT')",
                                "\n",
                                "        for product in products['ProductViewDetails']:",
                                "\n",
                                "            productName = product['ProductViewSummary']['Name']",
                                "\n",
                                "            if productName == prodName+'-'+prodOS:",
                                "\n",
                                "                productID=product['ProductViewSummary']['ProductId']",
                                "\n",
                                "                provisioningArtifacts = sc.list_provisioning_artifacts(ProductId=productID)['ProvisioningArtifactDetails']",
                                "\n",
                                "                if len(provisioningArtifacts) == 1:",
                                "\n",
                                "                    sc.delete_product(Id=productID)",
                                "\n",
                                "                else:",
                                "\n",
                                "                    for artifact in provisioningArtifacts:",
                                "\n",
                                "                        if artifact['Name'] == version:",
                                "\n",
                                "                            sc.delete_provisioning_artifact(ProductId=productID,ProvisioningArtifactId=artifact['Id'])",
                                "\n",
                                "        ec2 = boto3.client('ec2',region)",
                                "\n",
                                "        ec2.deregister_image(ImageId=amiID)",
                                "\n",
                                "        time.sleep(5)",
                                "\n",
                                "        snaps = ec2.describe_snapshots()",
                                "\n",
                                "        for snap in snaps['Snapshots']:",
                                "\n",
                                "            if amiID in snap['Description']:",
                                "\n",
                                "                ec2.delete_snapshot(SnapshotId=snap['SnapshotId'])",
                                "\n",
                                "        ssm = boto3.client('ssm',region)",
                                "\n",
                                "        ssm.delete_parameters(Names=[prefix])",
                                "\n",
                                "        temp =  ssm.get_parameter(Name=masterAmis)['Parameter']['Value']",
                                "\n",
                                "        temp= temp.replace(amiID+',','').replace(','+amiID,'').replace(amiID,'')",
                                "\n",
                                "        if len(temp) == 0:",
                                "\n",
                                "            ssm.delete_parameters(Names=[masterAmis])",
                                "\n",
                                "        else:",
                                "\n",
                                "            ssm.put_parameter(Name=masterAmis,Type='String', Value=temp,Overwrite=True)",
                                "\n",
                                "        if region == sourceRegion:",
                                "\n",
                                "            ssm.delete_parameters(Names=params)",
                                "\n",
                                "    return 'Done';"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/lambda.tf", "terraform/modules/scanner/decommision_ami_version.tf"]
        },
        "AppendParamLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AppendSsmParamLambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter*",
                                        "ssm:PutParameter*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ssm:",
                                                "*",
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":parameter/GoldenAMI/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/iam.tf", "terraform/modules/scanner/append_ssm_param.tf"]
        },
        "AppendParamLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "AppendParamLambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "\n",
                                "import json",
                                "\n",
                                "import boto3",
                                "\n",
                                "import botocore",
                                "\n",
                                "def lambda_handler(event, context):",
                                "\n",
                                "    paramName =event['parameterName'];",
                                "\n",
                                "    amiIDVal=event['valueToBeCreatedOrAppended']",
                                "\n",
                                "    print(amiIDVal)",
                                "\n",
                                "    amiID=amiIDVal.replace(\"",
                                "\\\\r\\\\n",
                                "\",\"\\n\")",
                                "\n",
                                "    print(amiID)",
                                "\n",
                                "    ssm = boto3.client('ssm')",
                                "\n",
                                "    try:",
                                "\n",
                                "        AMIIdsParam =ssm.get_parameter(Name=paramName)",
                                "\n",
                                "        AMIIds=AMIIdsParam['Parameter']['Value']",
                                "\n",
                                "        AMIIds= AMIIds+','+ amiID",
                                "\n",
                                "        ssm.put_parameter(Name=paramName,Type='String', Value=AMIIds,Overwrite=True)",
                                "\n",
                                "    except botocore.exceptions.ClientError as e:",
                                "\n",
                                "        if e.response['Error']['Code'] == 'ParameterNotFound':",
                                "\n",
                                "            ssm.put_parameter(Name=paramName,Type='String', Value=amiID,Overwrite=True)",
                                "\n",
                                "    return 'appended parameter %s with value %s.' % (paramName,amiID)"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/lambda.tf", "terraform/modules/scanner/append_ssm_param.tf"]

        },
        "RunInspectorLambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AmazonInspectorFullAccess"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "RunInspectorLambdaExecutionPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "ssm:PutParameter",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ssm:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":parameter/GoldenAMI/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/iam.tf", "terraform/modules/scanner/run_inspector.tf"]

        },
        "RunInspectorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "RunInspectorLambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import urllib.parse",
                                "import boto3",
                                "import time",
                                "import os",
                                "def lambda_handler(event, context):",
                                "    amiId = event['AMI-ID']",
                                "    instanceId = event['instanceId']",
                                "    productOS = event.get('productOS')",
                                "    productName = event.get('productName')",
                                "    productVersion = event.get('productVersion')",
                                "    topicArn=event['topicArn']",
                                "    fullName = amiId+'-'+productOS+'/'+productName+'/'+productVersion",
                                "    region = os.environ[\"AWS_DEFAULT_REGION\"]",
                                "    ",
                                "    assessmentTemplateArn=\"\";",
                                "    ",
                                "    ec2Source =boto3.resource('ec2',region)",
                                "    inspector = boto3.client('inspector',region) ",
                                "    ssm = boto3.client('ssm',region) ",
                                "    rules = inspector.list_rules_packages();",
                                "    ParamName='/GoldenAMI/'+productOS+'/'+productName+'/'+productVersion+'/latestInstance'",
                                "    ssm.put_parameter(Name=ParamName,Value=instanceId,Type='String',Overwrite=True) ",
                                "    millis = int(round(time.time() * 1000))",
                                "    existingTemplates = inspector.list_assessment_templates(filter={'namePattern': amiId+'-'+productOS+'/'+productName+'/'+productVersion})",
                                "    print(\"Total length found:\"+str(len(existingTemplates['assessmentTemplateArns'])))",
                                "    if len(existingTemplates['assessmentTemplateArns'])==0:",
                                "        resGroup = inspector.create_resource_group(resourceGroupTags=[{'key': 'Type','value': amiId+'-'+productOS+'/'+productName+'/'+productVersion}])",
                                "        target = inspector.create_assessment_target(assessmentTargetName=fullName,resourceGroupArn=resGroup['resourceGroupArn'])",
                                "        template = inspector.create_assessment_template(assessmentTargetArn=target['assessmentTargetArn'],assessmentTemplateName=amiId+'/'+productOS+'/'+productName+'/'+productVersion, durationInSeconds=900,rulesPackageArns=rules['rulesPackageArns'])",
                                "        assessmentTemplateArn=template['assessmentTemplateArn']",
                                "        response = inspector.subscribe_to_event(event='ASSESSMENT_RUN_COMPLETED',resourceArn=template['assessmentTemplateArn'],topicArn=topicArn)",
                                "        print(\"Template Created:\"+template['assessmentTemplateArn'])",
                                "        ParamName='/GoldenAMI/'+productOS+'/'+productName+'/'+productVersion+'/assessmentTemplateARN'",
                                "        ssm.put_parameter(Name=ParamName,Value=template['assessmentTemplateArn'],Type='String',Overwrite=True)",
                                "    else:",
                                "         assessmentTemplateArn=existingTemplates.get('assessmentTemplateArns')[0]",
                                "   ",
                                "    time.sleep(10)",
                                "    run = inspector.start_assessment_run(assessmentTemplateArn=assessmentTemplateArn,assessmentRunName=fullName+\"-\"+str(millis))",
                                "    ParamName='/GoldenAMI/'+productOS+'/'+productName+'/'+productVersion+'/LatestAssessmentRunARN'",
                                "    ssm.put_parameter(Name=ParamName,Value=run['assessmentRunArn'],Type='String',Overwrite=True) ",
                                "    return \"Done\""
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/iam.tf", "terraform/modules/scanner/run_inspector.tf"]

        },
        "AssessAssessmentLambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AssessAssessmentLambdaExecutionPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "ssm:PutParameter",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ssm:",
                                                "*",
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":parameter/GoldenAMI/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "inspector:DescribeAssessmentTemplates",
                                        "inspector:DescribeFindings",
                                        "inspector:ListFindings"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/iam.tf", "terraform/modules/scanner/assess_assessment.tf"]

        },
        "AssessAssessmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "AssessAssessmentLambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json ",
                                "import os",
                                "import boto3",
                                "def lambda_handler(event, context): ",
                                "    message = event['Records'][0]['Sns']['Message']",
                                "    print(message)",
                                "    jsonVal = json.loads(message);",
                                "    print(jsonVal)",
                                "    assessmentArn =jsonVal['run']",
                                "    template =jsonVal['template']",
                                "    region = os.environ[\"AWS_DEFAULT_REGION\"]",
                                "    inspector = boto3.client('inspector',region) ",
                                "    findingArns = inspector.list_findings(assessmentRunArns=[jsonVal['run']],maxResults=500)",
                                "    countInfo=0",
                                "    countHigh=0",
                                "    countMedium=0",
                                "    countLow=0",
                                "    for findingArn in findingArns['findingArns']:",
                                "        finding = inspector.describe_findings(findingArns=[findingArn]) ",
                                "        for result in finding['findings']:",
                                "            if result['severity'] =='Informational':",
                                "                countInfo=countInfo+1",
                                "            if result['severity'] =='Low':",
                                "                countLow=countLow+1",
                                "            if result['severity'] =='Medium':",
                                "                countMedium=countMedium+1",
                                "            if result['severity'] =='High':",
                                "                countHigh=countHigh+1",
                                "    print(\"Total CVEs found:\"+str(countHigh))",
                                "    existingTemplates = inspector.describe_assessment_templates( assessmentTemplateArns=[template])",
                                "    print( existingTemplates['assessmentTemplates'][0]['name'])",
                                "    amiIdOriginal = existingTemplates['assessmentTemplates'][0]['name'];",
                                "    index=int(amiIdOriginal.find('/'))",
                                "    suffix= amiIdOriginal[index+1:]",
                                "    ",
                                "    ssm = boto3.client('ssm',region) ",
                                "    counts = \"Inspector findings found: High[\"+str(countHigh)+\"]\"+\", Medium[\"+str(countMedium)+\"]\"+\", Low[\"+str(countLow)+\"]\"+\", Info[\"+str(countInfo)+\"]\"",
                                "    ",
                                "    ParamName='/GoldenAMI/'+suffix+'/NumCVEs'  ",
                                "    ssm.put_parameter(Name=ParamName,Value=counts,Type='String',Overwrite=True) ",
                                "    ",
                                "    ParamName='/GoldenAMI/'+suffix+'/assessmentLink'  ",
                                "    link=  \"Link - https://\"+region+\".console.aws.amazon.com/inspector/home?region=\"+region+\"#/run?filter={\\\"assessmentRunArns\\\":\\\"\"+assessmentArn+\"\\\"}\"",
                                "    ssm.put_parameter(Name=ParamName,Value=link,Type='String',Overwrite=True) ",
                                "    return jsonVal['run']"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            },
            "Location" : ["terraform/modules/scanner/submodule/lambda/lambda.tf", "terraform/modules/scanner/assess_assessment.tf"]

        },
        "LambdaInvokePermissionForAssessAssessment": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "InspectorCompleteTopic"
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AssessAssessmentLambdaFunction",
                        "Arn"
                    ]
                }
            },
            "Location" : ["terraform/modules/scanner/assess_assessment.tf"]

        },
        "InspectorCompleteTopicPolicy": {
            "Type": "AWS::SNS::TopicPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyTopicPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "inspector-notifications-policy",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    "arn:aws:iam::485811472374:root"
                                  
                                ]
                            },
                            "Action": "sns:Publish",
                            "Resource": {
                                "Ref": "InspectorCompleteTopic"
                            }
                        }
                    ]
                },
                "Topics": [
                    {
                        "Ref": "InspectorCompleteTopic"
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodules/sns/sns.tf",,"terraform/modules/scanner/assess_assessment.tf"]

        },
        "InspectorCompleteTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "AssessAssessmentLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ]
            },
            "DependsOn": [
                "AssessAssessmentLambdaFunction"
            ],
            "Location" : ["terraform/modules/scanner/submodules/sns/sns.tf","terraform/modules/scanner/assess_assessment.tf"]
        },
        "ManagedInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ssm.amazonaws.com",
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "SamplePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": {
                                "Action": [
                                    "s3:*"
                                ],
                                "Effect": "Allow",
                                "Resource": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "GoldenAMIConfigBucket"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "GoldenAMIConfigBucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/managed_instance_iam.tf"]
        },
        "ManagedInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ManagedInstanceRole"
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/managed_instance_iam.tf"]
        },
        "AutomationServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ssm.amazonaws.com",
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "passrole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "ManagedInstanceRole",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "describeInstance",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeInstances"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "invokeLambdaFunction",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "lambda:InvokeFunction",
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "RunInspectorLambdaFunction",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "AppendParamLambda",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "PublishAMILambda",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "DecommissionAMIVersionLambda",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "InitiateAssessmentLambda",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/automation_service_iam.tf"]
        },
        "GoldenAMIAutomationDoc": {
            "Type": "AWS::SSM::Document",
            "DependsOn": [
                "InspectorCompleteTopic"
            ],
            "Properties": {
                "DocumentType": "Automation",
                "Content": {
                    "description": "This automation document triggers Golden AMI creation workflow.",
                    "schemaVersion": "0.3",
                    "assumeRole": {
                        "Fn::GetAtt": [
                            "AutomationServiceRole",
                            "Arn"
                        ]
                    },
                    "parameters": {
                        "sourceAMIid": {
                            "type": "String",
                            "description": "Source/Base AMI to be used for generating your golden AMI",
                            "default": "{{ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
                        },
                        "productName": {
                            "type": "String",
                            "description": "The syntax of this parameter is ProductName-ProductVersion.",
                            "default": {
                                "Ref": "productName"
                            }
                        },
                        "productOSAndVersion": {
                            "type": "String",
                            "description": "The syntax of this parameter is OSName-OSVersion",
                            "default": {
                                "Ref": "productOSAndVersion"
                            }
                        },
                        "ApproverARN": {
                            "type": "String",
                            "description": "AWS authenticated principals who are able to either approve or reject the Golden AMI. You can specify principals by using an AWS Identity and Access Management (IAM) user name, IAM user ARN, IAM role ARN, or an IAM assume role user ARN.",
                            "default": {
                                "Ref": "ApproverARN"
                            }
                        },
                        "ApproverNotificationArn": {
                            "type": "String",
                            "description": "SNS Topic ARN on which a notification would be published once the golden AMI candidate is ready for validation.",
                            "default": {
                                "Ref": "ApproverNotification"
                            }
                        },
                        "AMIVersion": {
                            "type": "String",
                            "description": "Golden AMI Build version number to be created.",
                            "default": {
                                "Ref": "buildVersion"
                            }
                        },
                        "subnetId": {
                            "type": "String",
                            "default": {
                                "Ref": "subnetPrivate"
                            },
                            "description": "Subnet in which instances will be launched."
                        },
                        "securityGroupId": {
                            "type": "String",
                            "default": {
                                "Ref": "secGroup"
                            },
                            "description": "Security Group that will be attached to the instance. By Default a security group without any inbound access is attached"
                        },
                        "instanceType": {
                            "type": "String",
                            "description": "A compatible instance-type for launching an instance",
                            "default": {
                                "Ref": "instanceType"
                            }
                        },
                        "targetAMIname": {
                            "type": "String",
                            "description": "Name for the golden AMI to be created",
                            "default": "{{productName}}-{{productOSAndVersion}}-{{AMIVersion}}"
                        },
                        "ManagedInstanceProfile": {
                            "type": "String",
                            "description": "Instance Profile. Do not change the default value.",
                            "default": {
                                "Ref": "ManagedInstanceProfile"
                            }
                        },
                        "SSMInstallationUserData": {
                            "type": "String",
                            "description": "Base64 encoded SSM installation user-data.",
                            "default": "IyEvYmluL2Jhc2gNCg0KZnVuY3Rpb24gZ2V0X2NvbnRlbnRzKCkgew0KICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4NCiAgICAgICAgY3VybCAtcyAtZiAiJDEiDQogICAgZWxpZiBbIC14ICIkKHdoaWNoIHdnZXQpIiBdOyB0aGVuDQogICAgICAgIHdnZXQgIiQxIiAtTyAtDQogICAgZWxzZQ0KICAgICAgICBkaWUgIk5vIGRvd25sb2FkIHV0aWxpdHkgKGN1cmwsIHdnZXQpIg0KICAgIGZpDQp9DQoNCnJlYWRvbmx5IElERU5USVRZX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC8yMDE2LTA2LTMwL2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQvIg0KcmVhZG9ubHkgVFJVRV9SRUdJT049JChnZXRfY29udGVudHMgIiRJREVOVElUWV9VUkwiIHwgYXdrIC1GXCIgJy9yZWdpb24vIHsgcHJpbnQgJDQgfScpDQpyZWFkb25seSBERUZBVUxUX1JFR0lPTj0idXMtZWFzdC0xIg0KcmVhZG9ubHkgUkVHSU9OPSIke1RSVUVfUkVHSU9OOi0kREVGQVVMVF9SRUdJT059Ig0KDQpyZWFkb25seSBTQ1JJUFRfTkFNRT0iYXdzLWluc3RhbGwtc3NtLWFnZW50Ig0KIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5hbWF6b25hd3MuY29tL3NjcmlwdHMvJFNDUklQVF9OQU1FIg0KDQppZiBbICIkUkVHSU9OIiA9ICJjbi1ub3J0aC0xIiBdOyB0aGVuDQogIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy5jbi1ub3J0aC0xLmFtYXpvbmF3cy5jb20uY24vc2NyaXB0cy8kU0NSSVBUX05BTUUiDQpmaQ0KDQppZiBbICIkUkVHSU9OIiA9ICJ1cy1nb3Ytd2VzdC0xIiBdOyB0aGVuDQogIFNDUklQVF9VUkw9Imh0dHBzOi8vYXdzLXNzbS1kb3dubG9hZHMtJFJFR0lPTi5zMy11cy1nb3Ytd2VzdC0xLmFtYXpvbmF3cy5jb20vc2NyaXB0cy8kU0NSSVBUX05BTUUiDQpmaQ0KDQpjZCAvdG1wDQpGSUxFX1NJWkU9MA0KTUFYX1JFVFJZX0NPVU5UPTMNClJFVFJZX0NPVU5UPTANCg0Kd2hpbGUgWyAkUkVUUllfQ09VTlQgLWx0ICRNQVhfUkVUUllfQ09VTlQgXSA7IGRvDQogIGVjaG8gQVdTLVVwZGF0ZUxpbnV4QW1pOiBEb3dubG9hZGluZyBzY3JpcHQgZnJvbSAkU0NSSVBUX1VSTA0KICBnZXRfY29udGVudHMgIiRTQ1JJUFRfVVJMIiA+ICIkU0NSSVBUX05BTUUiDQogIEZJTEVfU0laRT0kKGR1IC1rIC90bXAvJFNDUklQVF9OQU1FIHwgY3V0IC1mMSkNCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IEZpbmlzaGVkIGRvd25sb2FkaW5nIHNjcmlwdCwgc2l6ZTogJEZJTEVfU0laRQ0KICBpZiBbICRGSUxFX1NJWkUgLWd0IDAgXTsgdGhlbg0KICAgIGJyZWFrDQogIGVsc2UNCiAgICBpZiBbWyAkUkVUUllfQ09VTlQgLWx0IE1BWF9SRVRSWV9DT1VOVCBdXTsgdGhlbg0KICAgICAgUkVUUllfQ09VTlQ9JCgoUkVUUllfQ09VTlQrMSkpOw0KICAgICAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IEZpbGVTaXplIGlzIDAsIHJldHJ5Q291bnQ6ICRSRVRSWV9DT1VOVA0KICAgIGZpDQogIGZpIA0KZG9uZQ0KDQppZiBbICRGSUxFX1NJWkUgLWd0IDAgXTsgdGhlbg0KICBjaG1vZCAreCAiJFNDUklQVF9OQU1FIg0KICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogUnVubmluZyBVcGRhdGVTU01BZ2VudCBzY3JpcHQgbm93IC4uLi4NCiAgLi8iJFNDUklQVF9OQU1FIiAtLXJlZ2lvbiAiJFJFR0lPTiINCmVsc2UNCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IFVuYWJsZSB0byBkb3dubG9hZCBzY3JpcHQsIHF1aXR0aW5nIC4uLi4NCmZp"
                        },
                        "PreUpdateScript": {
                            "type": "String",
                            "description": "(Optional) URL of a script to run before updates are applied. Default (\"none\") is to not run a script.",
                            "default": "none"
                        },
                        "PostUpdateScript": {
                            "type": "String",
                            "description": "(Optional) URL of a script to run after package updates are applied. Default (\"none\") is to not run a script.",
                            "default": "none"
                        },
                        "IncludePackages": {
                            "type": "String",
                            "description": "(Optional) Only update these named packages. By default (\"all\"), all available updates are applied.",
                            "default": "all"
                        },
                        "ExcludePackages": {
                            "type": "String",
                            "description": "(Optional) Names of packages to hold back from updates, under all conditions. By default (\"none\"), no package is excluded.",
                            "default": "none"
                        }
                    },
                    "mainSteps": [
                        {
                            "name": "startInstances",
                            "action": "aws:runInstances",
                            "timeoutSeconds": 3600,
                            "maxAttempts": 1,
                            "onFailure": "Abort",
                            "inputs": {
                                "ImageId": "{{ sourceAMIid }}",
                                "InstanceType": "{{instanceType}}",
                                "MinInstanceCount": 1,
                                "MaxInstanceCount": 1,
                                "SubnetId": "{{ subnetId }}",
                                "SecurityGroupIds": [
                                    "{{ securityGroupId }}"
                                ],
                                "UserData": "{{SSMInstallationUserData}}",
                                "IamInstanceProfileName": "{{ ManagedInstanceProfile }}"
                            }
                        },
                        {
                            "name": "updateSSMAgent",
                            "action": "aws:runCommand",
                            "maxAttempts": 3,
                            "onFailure": "Abort",
                            "timeoutSeconds": 14400,
                            "inputs": {
                                "DocumentName": "AWS-UpdateSSMAgent",
                                "InstanceIds": [
                                    "{{ startInstances.InstanceIds }}"
                                ]
                            }
                        },
                        {
                            "name": "describeInstance",
                            "action": "aws:executeAwsApi",
                            "onFailure": "Abort",
                            "inputs": {
                                "Service": "ec2",
                                "Api": "DescribeInstances",
                                "InstanceIds": [
                                    "{{ startInstances.InstanceIds }}"
                                ]
                            },
                            "outputs": [
                                {
                                    "Name": "Platform",
                                    "Selector": "$.Reservations[0].Instances[0].Platform",
                                    "Type": "String"
                                }
                            ],
                            "nextStep": "branchOnInstancePlatform"
                        },
                        {
                            "name": "branchOnInstancePlatform",
                            "action": "aws:branch",
                            "inputs": {
                                "Choices": [
                                    {
                                        "NextStep": "installWindowsUpdates",
                                        "Variable": "{{ describeInstance.Platform }}",
                                        "StringEquals": "windows"
                                    },
                                    {
                                        "NextStep": "updateOSSoftware",
                                        "Variable": "{{ describeInstance.Platform }}",
                                        "StringEquals": "linux"
                                    }
                                ],
                                "Default": "updateOSSoftware"
                            }
                        },
                        {
                            "name": "installWindowsUpdates",
                            "action": "aws:runCommand",
                            "maxAttempts": 3,
                            "onFailure": "Abort",
                            "timeoutSeconds": 14400,
                            "inputs": {
                                "DocumentName": "AWS-InstallWindowsUpdates",
                                "InstanceIds": [
                                    "{{ startInstances.InstanceIds }}"
                                ]
                            },
                            "nextStep": "stopInstance"
                        },
                        {
                            "name": "updateOSSoftware",
                            "action": "aws:runCommand",
                            "maxAttempts": 3,
                            "timeoutSeconds": 3600,
                            "onFailure": "Abort",
                            "inputs": {
                                "DocumentName": "AWS-RunShellScript",
                                "InstanceIds": [
                                    "{{startInstances.InstanceIds}}"
                                ],
                                "Parameters": {
                                    "commands": [
                                        "set -e",
                                        "[ -x \"$(which wget)\" ] && get_contents='wget $1 -O -'",
                                        "[ -x \"$(which curl)\" ] && get_contents='curl -s -f $1'",
                                        "eval $get_contents https://aws-ssm-downloads-{{global:REGION}}.s3.amazonaws.com/scripts/aws-update-linux-instance > /tmp/aws-update-linux-instance",
                                        "chmod +x /tmp/aws-update-linux-instance",
                                        "/tmp/aws-update-linux-instance --pre-update-script '{{PreUpdateScript}}' --post-update-script '{{PostUpdateScript}}' --include-packages '{{IncludePackages}}' --exclude-packages '{{ExcludePackages}}' 2>&1 | tee /tmp/aws-update-linux-instance.log"
                                    ]
                                }
                            },
                            "nextStep": "stopInstance"
                        },
                        {
                            "name": "stopInstance",
                            "action": "aws:changeInstanceState",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Abort",
                            "inputs": {
                                "InstanceIds": [
                                    "{{ startInstances.InstanceIds }}"
                                ],
                                "DesiredState": "stopped"
                            }
                        },
                        {
                            "name": "createImage",
                            "action": "aws:createImage",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Continue",
                            "inputs": {
                                "InstanceId": "{{ startInstances.InstanceIds }}",
                                "ImageName": "{{ targetAMIname }}",
                                "NoReboot": true,
                                "ImageDescription": "AMI created by EC2 Automation"
                            }
                        },
                        {
                            "name": "TagTheAMI",
                            "action": "aws:createTags",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Continue",
                            "inputs": {
                                "ResourceType": "EC2",
                                "ResourceIds": [
                                    "{{ createImage.ImageId }}"
                                ],
                                "Tags": [
                                    {
                                        "Key": "ProductOSAndVersion",
                                        "Value": "{{productOSAndVersion}}"
                                    },
                                    {
                                        "Key": "ProductName",
                                        "Value": "{{productName}}"
                                    },
                                    {
                                        "Key": "version",
                                        "Value": "{{AMIVersion}}"
                                    },
                                    {
                                        "Key": "AMI-Type",
                                        "Value": "Golden"
                                    }
                                ]
                            }
                        },
                        {
                            "name": "terminateFirstInstance",
                            "action": "aws:changeInstanceState",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Continue",
                            "inputs": {
                                "InstanceIds": [
                                    "{{ startInstances.InstanceIds }}"
                                ],
                                "DesiredState": "terminated"
                            }
                        },
                        {
                            "name": "createInstanceFromNewImage",
                            "action": "aws:runInstances",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Abort",
                            "inputs": {
                                "ImageId": "{{ createImage.ImageId }}",
                                "InstanceType": "{{instanceType}}",
                                "MinInstanceCount": 1,
                                "MaxInstanceCount": 1,
                                "SubnetId": "{{ subnetId }}",
                                "SecurityGroupIds": [
                                    "{{ securityGroupId }}"
                                ],
                                "IamInstanceProfileName": "{{ ManagedInstanceProfile }}"
                            }
                        },
                        {
                            "name": "InstallInspector",
                            "action": "aws:runCommand",
                            "maxAttempts": 3,
                            "timeoutSeconds": 3600,
                            "onFailure": "Abort",
                            "inputs": {
                                "DocumentName": "AmazonInspector-ManageAWSAgent",
                                "InstanceIds": [
                                    "{{ createInstanceFromNewImage.InstanceIds }}"
                                ],
                                "Parameters": {
                                    "Operation": "Install"
                                }
                            }
                        },
                        {
                            "name": "TagNewinstance",
                            "action": "aws:createTags",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Continue",
                            "inputs": {
                                "ResourceType": "EC2",
                                "ResourceIds": [
                                    "{{ createInstanceFromNewImage.InstanceIds }}"
                                ],
                                "Tags": [
                                    {
                                        "Key": "Type",
                                        "Value": "{{createImage.ImageId}}-{{productOSAndVersion}}/{{productName}}/{{AMIVersion}}"
                                    },
                                    {
                                        "Key": "Automation-Instance-Type",
                                        "Value": "Golden"
                                    }
                                ]
                            }
                        },
                        {
                            "name": "InspectBaseInstance",
                            "action": "aws:invokeLambdaFunction",
                            "maxAttempts": 3,
                            "timeoutSeconds": 120,
                            "onFailure": "Abort",
                            "inputs": {
                                "FunctionName": {
                                    "Ref": "RunInspectorLambdaFunction"
                                },
                                "Payload": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{\"AMI-ID\": \"{{createImage.ImageId}}\",\"topicArn\":\"",
                                            {
                                                "Ref": "InspectorCompleteTopic"
                                            },
                                            "\",\"instanceId\": \"{{ createInstanceFromNewImage.InstanceIds }}\",\"productOS\": \"{{productOSAndVersion}}\",\"productName\": \"{{productName}}\",\"productVersion\": \"{{AMIVersion}}\"}"
                                        ]
                                    ]
                                }
                            }
                        },
                        {
                            "name": "sleep",
                            "action": "aws:sleep",
                            "inputs": {
                                "Duration": "PT2M"
                            }
                        },
                        {
                            "name": "terminateInspectorInstance",
                            "action": "aws:changeInstanceState",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Continue",
                            "inputs": {
                                "InstanceIds": [
                                    "{{ createInstanceFromNewImage.InstanceIds }}"
                                ],
                                "DesiredState": "terminated"
                            }
                        },
                        {
                            "name": "addNewVersionParameter",
                            "action": "aws:invokeLambdaFunction",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Abort",
                            "inputs": {
                                "FunctionName": {
                                    "Ref": "AppendParamLambda"
                                },
                                "Payload": "{\"parameterName\":\"/GoldenAMI/{{productOSAndVersion}}/{{productName}}/{{AMIVersion}}\", \"valueToBeCreatedOrAppended\":\"{{createImage.ImageId}}\"}"
                            }
                        },
                        {
                            "name": "approve",
                            "action": "aws:approve",
                            "timeoutSeconds": 172800,
                            "onFailure": "Abort",
                            "inputs": {
                                "NotificationArn": "{{ ApproverNotificationArn }}",
                                "Message": "Please check contents of SSM Parameter : /GoldenAMI/{{productOSAndVersion}}/{{productName}}/{{AMIVersion}}/NumCVEs and approve/deny the build.",
                                "MinRequiredApprovals": 1,
                                "Approvers": [
                                    "{{ ApproverARN }}"
                                ]
                            }
                        },
                        {
                            "name": "updateLatestVersionValue",
                            "action": "aws:invokeLambdaFunction",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Abort",
                            "inputs": {
                                "FunctionName": {
                                    "Ref": "AppendParamLambda"
                                },
                                "Payload": "{\"parameterName\":\"/GoldenAMI/latest\", \"valueToBeCreatedOrAppended\":\"{{createImage.ImageId}}\"}"
                            }
                        }
                    ],
                    "outputs": [
                        "createImage.ImageId"
                    ]
                }
            },
            "Location" : ["terraform/modules/scanner/ssm_documents.tf"]

        },
        "DecommissionAMIVersion": {
            "Type": "AWS::SSM::Document",
            "Properties": {
                "DocumentType": "Automation",
                "Content": {
                    "description": "This automation document triggers golden AMI build decommissioning workflow",
                    "schemaVersion": "0.3",
                    "assumeRole": {
                        "Fn::GetAtt": [
                            "AutomationServiceRole",
                            "Arn"
                        ]
                    },
                    "parameters": {
                        "bucketName": {
                            "type": "String",
                            "description": "This parameter contains name of the bucket in which CFT template file is stored",
                            "default": {
                                "Ref": "GoldenAMIConfigBucket"
                            }
                        },
                        "templateFileName": {
                            "type": "String",
                            "description": "The CFT template file-name used for creating the Service Catalog product",
                            "default": "simpleEC2-SSMParamInput.json"
                        },
                        "productName": {
                            "type": "String",
                            "description": "The syntax of this parameter is ProductName-ProductVersion",
                            "default": {
                                "Ref": "productName"
                            }
                        },
                        "productOSAndVersion": {
                            "type": "String",
                            "description": "The syntax of this parameter is OSName-OSVersion",
                            "default": {
                                "Ref": "productOSAndVersion"
                            }
                        },
                        "buildVersion": {
                            "type": "String",
                            "description": "Golden AMI build number to be decommissioned.",
                            "default": {
                                "Ref": "buildVersion"
                            }
                        },
                        "MetadataParamName": {
                            "type": "String",
                            "description": "This parameter points to an SSM parameter used for storing some process specific metadata. Do not change the default value.",
                            "default": "/GoldenAMI/{{productOSAndVersion}}/{{productName}}/{{buildVersion}}/temp"
                        }
                    },
                    "mainSteps": [
                        {
                            "name": "DecommissionAMIVersionLambda",
                            "action": "aws:invokeLambdaFunction",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Abort",
                            "inputs": {
                                "FunctionName": {
                                    "Ref": "DecommissionAMIVersionLambda"
                                },
                                "Payload": "{\"bucketName\":\"{{ bucketName }}\", \"amiRegionMappingParamName\":\"{{ MetadataParamName }}\", \"templateFileName\":\"{{templateFileName}}\", \"versionToBeDeleted\":\"{{ buildVersion }}\", \"productOSAndVersion\":\"{{ productOSAndVersion }}\", \"productNameAndVersion\":\"{{ productName }}\"}"
                            }
                        }
                    ]
                }
            },
            "Location" : ["terraform/modules/scanner/ssm_documents.tf"]
        },
        "InitiateAssessmentLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "InitiateAssessmentLambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter*",
                                        "ssm:PutParameter*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ssm:",
                                                "*",
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":parameter/GoldenAMI/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Action": "ssm:SendCommand",
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ssm:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    "::document/AmazonInspector-ManageAWSAgent"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":instance/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "inspector:ListAssessmentTemplates",
                                        "inspector:StartAssessmentRun"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodules/lambda/iam.tf","terraform/modules/scanner/initiate_assessment.tf"]
        },
        "InitiateAssessmentLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "InitiateAssessmentLambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "import boto3",
                                "\n",
                                "import json",
                                "\n",
                                "from dateutil import parser",
                                "\n",
                                "import dateutil",
                                "\n",
                                "import datetime",
                                "\n",
                                "import collections",
                                "\n",
                                "import os",
                                "\n",
                                "import time",
                                "\n",
                                "import botocore",
                                "\n",
                                "def lambda_handler(event, context):",
                                "\n",
                                "    region=os.environ['AWS_DEFAULT_REGION']",
                                "\n",
                                "    ssm = boto3.client('ssm',region)",
                                "\n",
                                "    instanceIDsVal = event['instanceIDs']",
                                "\n",
                                "    instanceIDs = instanceIDsVal.split(',')",
                                "\n",
                                "    for id in instanceIDs:",
                                "\n",
                                "        ssm.send_command(InstanceIds=[id], DocumentName='AmazonInspector-ManageAWSAgent',Parameters={'Operation': [ 'Install']})",
                                "\n",
                                "    inspector = boto3.client('inspector',region)",
                                "\n",
                                "    time.sleep(120)",
                                "\n",
                                "    millis = int(round(time.time() * 1000))",
                                "\n",
                                "    existingTemplates = inspector.list_assessment_templates(filter={'namePattern': 'ContinuousAssessment'})",
                                "\n",
                                "    assessmentTemplateArn=existingTemplates.get('assessmentTemplateArns')[0]",
                                "\n",
                                "    run = inspector.start_assessment_run(assessmentTemplateArn=assessmentTemplateArn,assessmentRunName='ContinuousAssessment'+'-'+str(millis))",
                                "\n",
                                "    return 'Done'"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            },
            "Location" : ["terraform/modules/scanner/submodules/lambda/iam.tf","terraform/modules/scanner/initiate_assessment.tf"]

        },
        "RunContinuousInspection": {
            "Type": "AWS::SSM::Document",
            "Properties": {
                "DocumentType": "Automation",
                "Content": {
                    "description": "This automation document is triggered as part of the continuous vulnerability assessment on all active golden AMIs.",
                    "schemaVersion": "0.3",
                    "assumeRole": {
                        "Fn::GetAtt": [
                            "AutomationServiceRole",
                            "Arn"
                        ]
                    },
                    "parameters": {
                        "instanceIDs": {
                            "type": "String",
                            "description": "This parameter contains list of instance-ids on which continuous vulnerability assessment is  performed."
                        }
                    },
                    "mainSteps": [
                        {
                            "name": "sleep",
                            "action": "aws:sleep",
                            "inputs": {
                                "Duration": "PT6M"
                            }
                        },
                        {
                            "name": "InitiateAssessmentLambdaFunction",
                            "action": "aws:invokeLambdaFunction",
                            "timeoutSeconds": 1200,
                            "maxAttempts": 1,
                            "onFailure": "Abort",
                            "inputs": {
                                "FunctionName": {
                                    "Ref": "InitiateAssessmentLambda"
                                },
                                "Payload": "{\"instanceIDs\":\"{{ instanceIDs }}\"}"
                            }
                        }
                    ]
                }
            },
            "Location" : ["terraform/modules/scanner/ssm_documents.tf"]
        },
        "ContinuousAssessmentResourceGroup": {
            "Type": "AWS::Inspector::ResourceGroup",
            "Properties": {
                "ResourceGroupTags": [
                    {
                        "Key": "continuous-assessment-instance",
                        "Value": "true"
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/inspector.tf"]

        },
        "ContinuousAssessmentTarget": {
            "Type": "AWS::Inspector::AssessmentTarget",
            "Properties": {
                "ResourceGroupArn": {
                    "Ref": "ContinuousAssessmentResourceGroup"
                }
            },
            "Location" : ["terraform/modules/scanner/inspector.tf"]
        },
        "ScheduledRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "ScheduledRule",
                "ScheduleExpression": {
                    "Ref": "continuousInspectionFrequency"
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "SetupContinuousAssessmentLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Id": "TargetFunctionV1",
                        "Input": {
                            "Fn::Join": [
                                "",
                                [
                                    "{\"AMIsParamName\":\"/GoldenAMI/",
                                    "latest",
                                    "\", \"instanceType\":\"",
                                    {
                                        "Ref": "instanceType"
                                    },
                                    "\"}"
                                ]
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/cloudwatch.tf"]
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "SetupContinuousAssessmentLambdaFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ScheduledRule",
                        "Arn"
                    ]
                }
            },
            "Location" : ["terraform/modules/scanner/setup_continuous_assessment.tf"]
        },
        "StartContinuousAssessmentLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AmazonInspectorFullAccess"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "StartContinuousAssessmentLambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "StartContinuousAssessmentLambdaPolicyStmt",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ssm:",
                                                    "*",
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":parameter/GoldenAMI/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "StartContinuousAssessmentLambdaPolicy2",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "StartContinuousAssessmentLambdaPolicyStmt2",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeImages"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "iam:PassRole",
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "ManagedInstanceRole",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ssm:StartAutomationExecution",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ssm:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":automation-definition/",
                                                {
                                                    "Ref": "RunContinuousInspection"
                                                },
                                                ":*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CopyImage",
                                        "ec2:DescribeImages"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:createTags"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "ForAllValues:StringEquals": {
                                            "aws:TagKeys": [
                                                "AMI-Type",
                                                "ProductName",
                                                "continuous-assessment-instance",
                                                "ProductOSAndVersion",
                                                "version"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AssociateIamInstanceProfile"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "ManagedInstanceProfile",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:RunInstances",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    "::image/ami-*"
                                                ]
                                            ]
                                        }
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "ec2:ResourceTag/AMI-Type": "Golden"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:RunInstances",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":instance/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":subnet/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":volume/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":network-interface/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":key-pair/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:ec2:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":security-group/*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Location" : ["terraform/modules/scanner/submodules/lambda/iam.tf",,"terraform/modules/scanner/setup_continuous_assessment.tf"]

        },
        "SetupContinuousAssessmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "StartContinuousAssessmentLambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "\n",
                                "import json",
                                "\n",
                                "import urllib.parse",
                                "\n",
                                "import boto3",
                                "\n",
                                "import time",
                                "\n",
                                "import os",
                                "\n",
                                "def lambda_handler(event, context):",
                                "\n",
                                "    amisParamName = event['AMIsParamName'];",
                                "\n",
                                "    instanceType = event['instanceType'];",
                                "\n",
                                "    region=os.environ['AWS_DEFAULT_REGION']",
                                "\n",
                                "    ec2 = boto3.client('ec2',region)",
                                "\n",
                                "    ssm = boto3.client('ssm',region)",
                                "\n",
                                "    inspector = boto3.client('inspector',region)",
                                "\n",
                                "    amisJson =  ssm.get_parameter(Name=amisParamName)['Parameter']['Value']",
                                "\n",
                                "    items = amisJson.split(',')",
                                "\n",
                                "    instanceIDs = ''",
                                "\n",
                                "    for entry in items:",
                                "\n",
                                "        images= ec2.describe_images(ImageIds=[entry],DryRun=False)",
                                "\n",
                                "        if 'Tags' in images['Images'][0]:",
                                "\n",
                                "            tags = images['Images'][0]['Tags']",
                                "\n",
                                "            tags.append({'Key': 'continuous-assessment-instance', 'Value': 'true'})",
                                "\n",
                                "            response = ec2.run_instances(ImageId=entry,SubnetId='",
                                {
                                    "Ref": "subnetPrivate"
                                },
                                "',IamInstanceProfile={'Arn':'",
                                {
                                    "Fn::GetAtt": [
                                        "ManagedInstanceProfile",
                                        "Arn"
                                    ]
                                },
                                "'},SecurityGroupIds=['",
                                {
                                    "Ref": "secGroup"
                                },
                                "'],InstanceType=instanceType,DryRun=False,MaxCount=1,MinCount=1,TagSpecifications=[{'ResourceType': 'instance','Tags': tags}])",
                                "\n",
                                "        else:",
                                "\n",
                                "            response = ec2.run_instances(ImageId=entry,SubnetId='",
                                {
                                    "Ref": "subnetPrivate"
                                },
                                "',IamInstanceProfile={'Arn':'",
                                {
                                    "Fn::GetAtt": [
                                        "ManagedInstanceProfile",
                                        "Arn"
                                    ]
                                },
                                "'}, SecurityGroupIds=['",
                                {
                                    "Ref": "secGroup"
                                },
                                "'],InstanceType=instanceType,DryRun=False,MaxCount=1,MinCount=1,TagSpecifications=[{'ResourceType': 'instance','Tags': [{'Key': 'continuous-assessment-instance', 'Value': 'true'},{'Key': 'AMI-Type', 'Value': 'Golden'}]}])",
                                "\n",
                                "        if len(instanceIDs)==0:",
                                "\n",
                                "            instanceIDs=response['Instances'][0]['InstanceId']",
                                "\n",
                                "        else:",
                                "\n",
                                "            instanceIDs=instanceIDs+','+response['Instances'][0]['InstanceId']",
                                "\n",
                                "    assessmentTemplateArn='';",
                                "\n",
                                "    rules = inspector.list_rules_packages();",
                                "\n",
                                "    ",
                                "\n",
                                "    millis = int(round(time.time() * 1000))",
                                "\n",
                                "    existingTemplates = inspector.list_assessment_templates(filter={'namePattern': 'ContinuousAssessment'})",
                                "\n",
                                "    print('Total templates found:'+str(len(existingTemplates['assessmentTemplateArns'])))",
                                "\n",
                                "    if len(existingTemplates['assessmentTemplateArns'])==0:",
                                "\n",
                                "        template = inspector.create_assessment_template(assessmentTargetArn='",
                                {
                                    "Ref": "ContinuousAssessmentTarget"
                                },
                                "',assessmentTemplateName='ContinuousAssessment', durationInSeconds=3600,rulesPackageArns=rules['rulesPackageArns'])",
                                "\n",
                                "        assessmentTemplateArn=template['assessmentTemplateArn']",
                                "\n",
                                "        response = inspector.subscribe_to_event(event='ASSESSMENT_RUN_COMPLETED',resourceArn=template['assessmentTemplateArn'],topicArn='",
                                {
                                    "Ref": "ContinuousAssessmentCompleteTopic"
                                },
                                "') ",
                                "\n",
                                "        print('Template Created:'+template['assessmentTemplateArn'])",
                                "\n",
                                "        time.sleep(20)",
                                "\n",
                                "    ssm.start_automation_execution(DocumentName='",
                                {
                                    "Ref": "RunContinuousInspection"
                                },
                                "', Parameters={'instanceIDs': [instanceIDs]})",
                                "\n",
                                "    return 'Assessment started'"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            },
            "Location" : ["terraform/modules/scanner/submodules/lambda/iam.tf",,"terraform/modules/scanner/setup_continuous_assessment.tf"]
        },
        "ContinuousAssessmentResultsTopic": {
            "Type": "AWS::SNS::Topic"
        },
        "ContinuousAssessmentResultsTopicSubscription": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "Endpoint": {
                    "Ref": "EmailID"
                },
                "Protocol": "email",
                "TopicArn": {
                    "Ref": "ContinuousAssessmentResultsTopic"
                }
            }
        },
        "ContinuousAssessmentCompleteTopicSubscription": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "Endpoint": {
                    "Fn::GetAtt": [
                        "AnalyzeInspectorFindingsLambdaFunction",
                        "Arn"
                    ]
                },
                "Protocol": "lambda",
                "TopicArn": {
                    "Ref": "ContinuousAssessmentCompleteTopic"
                }
            }
        },
        "ContinuousAssessmentCompleteTopic": {
            "Type": "AWS::SNS::Topic"
        },
        "ContinuousAssessmentCompleteTopicPolicy": {
            "Type": "AWS::SNS::TopicPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyTopicPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "My-statement-id",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "inspector.amazonaws.com"
                            },
                            "Action": "sns:Publish",
                            "Resource": {
                                "Ref": "ContinuousAssessmentCompleteTopic"
                            }
                        }
                    ]
                },
                "Topics": [
                    {
                        "Ref": "ContinuousAssessmentCompleteTopic"
                    }
                ]
            }
        },
        "LambdaInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "ContinuousAssessmentCompleteTopic"
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "AnalyzeInspectorFindingsLambdaFunction",
                        "Arn"
                    ]
                }
            }
        },
        "AnalyzeInspectorFindingsLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AnalyzeInspectorFindingsLambdaPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "AnalyzeInspectorFindingsLambdaPolicyStmt",
                                    "Effect": "Allow",
                                    "Action": [
                                        "inspector:AddAttributesToFindings",
                                        "inspector:DescribeFindings",
                                        "ec2:DescribeInstances",
                                        "inspector:ListFindings"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid": "AnalyzeInspectorFindingsLambdaPolicyStmt2",
                                    "Effect": "Allow",
                                    "Action": "sns:Publish",
                                    "Resource": {
                                        "Ref": "ContinuousAssessmentResultsTopic"
                                    }
                                },
                                {
                                    "Sid": "AnalyzeInspectorFindingsLambdaPolicyStmt3",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:TerminateInstances"
                                    ],
                                    "Resource": [
                                        "*"
                                    ],
                                    "Condition": {
                                        "StringEquals": {
                                            "ec2:ResourceTag/continuous-assessment-instance": "true"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AnalyzeInspectorFindingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": [
                        "AnalyzeInspectorFindingsLambdaRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "\n",
                                "import json ",
                                "\n",
                                "import os",
                                "\n",
                                "import boto3",
                                "\n",
                                "import collections",
                                "\n",
                                "import ast",
                                "\n",
                                "def lambda_handler(event, context): ",
                                "\n",
                                "    message = event['Records'][0]['Sns']['Message'] ",
                                "\n",
                                "    jsonVal = json.loads(message);",
                                "\n",
                                "    assessmentArn =jsonVal['run']  ",
                                "\n",
                                "    region=os.environ['AWS_DEFAULT_REGION']",
                                "\n",
                                "    ec2 = boto3.client('ec2',region) ",
                                "\n",
                                "    sns = boto3.client('sns',region) ",
                                "\n",
                                "    inspector = boto3.client('inspector',region) ",
                                "\n",
                                "    findingArns = inspector.list_findings(assessmentRunArns=[jsonVal['run']],maxResults=5000)",
                                "\n",
                                "    aggregateData={}",
                                "\n",
                                "    for findingArn in findingArns['findingArns']:",
                                "\n",
                                "        finding = inspector.describe_findings(findingArns=[findingArn]) ",
                                "\n",
                                "        for result in finding['findings']: ",
                                "\n",
                                "            instanceId =result['assetAttributes']['agentId']",
                                "\n",
                                "            severity =result['severity']",
                                "\n",
                                "            cveName=result['id']",
                                "\n",
                                "            if not (instanceId) in aggregateData:",
                                "\n",
                                "                aggregateData[instanceId]={}",
                                "\n",
                                "                aggregateData[instanceId]['findings']={}",
                                "\n",
                                "                aggregateData[instanceId]['findings'][severity]=0",
                                "\n",
                                "                instance=ec2.describe_instances(InstanceIds=[instanceId]);",
                                "\n",
                                "                tagsStr=str(instance['Reservations'][0]['Instances'][0]['Tags']) ",
                                "\n",
                                "                tagsStr =tagsStr.replace('Key','key').replace('Value','value')  ",
                                "\n",
                                "                aggregateData[instanceId]['tags']= ast.literal_eval(tagsStr)",
                                "\n",
                                "            elif not (severity) in aggregateData[instanceId]['findings']:",
                                "\n",
                                "                aggregateData[instanceId]['findings'][severity]=0",
                                "\n",
                                "            aggregateData[instanceId]['findings'][severity]=aggregateData[instanceId]['findings'][severity]+1; ",
                                "\n",
                                "            inspector.add_attributes_to_findings(findingArns=[result['arn']],attributes=aggregateData[instanceId]['tags'])",
                                "\n",
                                "    tagsList=[]",
                                "\n",
                                "    for key  in aggregateData: ",
                                "\n",
                                "        outputJson=[] ",
                                "\n",
                                "        for tag in aggregateData[key]['tags']:",
                                "\n",
                                "            if tag['key'] != 'continuous-assessment-instance':",
                                "\n",
                                "                outputJson.append(\"\\\"\"+tag['key']+\"\\\"\"+\":\"+\"\\\"\"+tag['value']+\"\\\"\")",
                                "\n",
                                "        for sev in aggregateData[key]['findings']:",
                                "\n",
                                "            outputJson.append(\"\\\"Finding-Severity-\"+sev+\"-Count\\\"\"+\":\"+\"\\\"\"+str(aggregateData[key]['findings'][sev])+\"\\\"\")",
                                "\n",
                                "        outputJson.sort()",
                                "\n",
                                "        print(outputJson)",
                                "\n",
                                "        tagsList.append('{'+', '.join(outputJson)+'}')",
                                "\n",
                                "        print('Terminating:'+key)",
                                "\n",
                                "        ec2.terminate_instances(InstanceIds=[key],DryRun=False)",
                                "\n",
                                "    sns.publish(TopicArn='",
                                {
                                    "Ref": "ContinuousAssessmentResultsTopic"
                                },
                                "',Message='['+', '.join(tagsList)+']')",
                                "\n",
                                "    return jsonVal['run']"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 300,
                "Handler": "index.lambda_handler",
                "MemorySize": 512
            }
        }
    },
    "Outputs": {
        "BucketName": {
            "Description": "The Name of the bucket created. Please upload template file in this bucket.",
            "Value": {
                "Ref": "GoldenAMIConfigBucket"
            }
        },
        "GoldenAMIAutomationDoc": {
            "Description": "The Name of the document that creates Golden AMI and executes Inspector.",
            "Value": {
                "Ref": "GoldenAMIAutomationDoc"
            }
        },
        "SetupContinuousAssessmentLambdaFunction": {
            "Description": "The Lambda function that initiates the vulnerability assessment.",
            "Value": {
                "Ref": "SetupContinuousAssessmentLambdaFunction"
            }
        },
        "DecommissionAMIVersionDoc": {
            "Description": "The Name of the document that decomissions a golden AMI version.",
            "Value": {
                "Ref": "DecommissionAMIVersion"
            }
        },
        "ContinuousInspectionScheduledRule": {
            "Description": "The Cloudwatch rule that executes the continuous inspection at the rate you specified.",
            "Value": {
                "Ref": "ScheduledRule"
            }
        },
        "ContinuousAssessmentResultsTopic": {
            "Description": "The SNS topic on which consolidated results are published",
            "Value": {
                "Ref": "ContinuousAssessmentResultsTopic"
            }
        }
    }
}